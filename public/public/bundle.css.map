{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../CandyChomper.svelte",
    "../ColorFill.svelte",
    "../ColorGrid.svelte",
    "../CongratsBanner.svelte",
    "../BlackJack.svelte",
    "../CardList.svelte",
    "../Counter.svelte",
    "../ProfitCalculator.svelte",
    "../SpeedTyper.svelte",
    "../SquareRootBind.svelte",
    "../Navbar.svelte",
    "../Switch.svelte",
    "../StatsTableDomestic.svelte",
    "../StatsTableGlobal.svelte",
    "../VirusStats.svelte",
    "../VirusTimeline.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import 'bulma/bulma.sass'\n  // @ts-ignore\n  import { Router } from 'svelte-router-spa'\n  import { routes } from './routes'\n  import Navbar from './components/Shared/Navbar.svelte'\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n  }\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  <Navbar />\n  <Router {routes} />\n</main>\n",
    "<script lang=\"ts\">import { onDestroy } from 'svelte';\nimport { colors, randomGrid, completedGrid } from '../../utils/ColorFill';\nimport { chomp, swapCandies } from '../../utils/CandyChomper';\nimport ColorGrid from './ColorGrid.svelte';\nimport CongratsBanner from './CongratsBanner.svelte';\n// Props\nexport let height = 15;\nexport let width = 15;\nexport let numColors = 6;\n// State\nlet row;\nlet column;\nlet grid;\nlet chomps = 0;\nlet moveCount = 0;\nlet completed = false;\nlet seconds = 0;\nlet teleportEnabled = false;\n// Set up timer\nconst onTick = () => seconds++;\nlet interval = setInterval(onTick, 1000);\nonDestroy(() => clearInterval(interval));\n// Initialize grid\nconst init = (() => {\n    grid = randomGrid(width, height, numColors);\n    row = Math.floor(Math.random() * height);\n    column = Math.floor(Math.random() * width);\n})();\n// Fill the grid\nconst handleSubmit = () => {\n    grid = swapCandies(grid, { x: column, y: row });\n    grid = chomp(grid, { x: column, y: row });\n    chomps++;\n    if (completedGrid(grid)) {\n        completed = true;\n        clearInterval(interval);\n    }\n};\n// Handle key presses\nconst handleKeydown = (event) => {\n    if (!completed) {\n        switch (event.key) {\n            // up\n            case 'ArrowUp':\n            case 'W': {\n                column = column - 1 < 0 ? width - 1 : column - 1;\n                moveCount++;\n                break;\n            }\n            // down\n            case 'ArrowDown':\n            case 'S': {\n                column = column + 1 > width - 1 ? 0 : column + 1;\n                moveCount++;\n                break;\n            }\n            // left\n            case 'ArrowLeft':\n            case 'D': {\n                row = row - 1 < 0 ? height - 1 : row - 1;\n                moveCount++;\n                break;\n            }\n            // right\n            case 'ArrowRight':\n            case 'D': {\n                row = row + 1 > height - 1 ? 0 : row + 1;\n                moveCount++;\n                break;\n            }\n            case 'Enter': {\n                // enter\n                handleSubmit();\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n};\n// Reset state\nconst reset = () => {\n    row = 0;\n    column = 0;\n    moveCount = 0;\n    completed = false;\n    grid = randomGrid(width, height, numColors);\n    seconds = 0;\n    setInterval(() => onTick, 1000);\n};\n// Moves directly to given location\nconst select = (event) => {\n    row = event.detail.x;\n    column = event.detail.y;\n};\n</script>\n\n<style>\n  span,\n  button {\n    margin: 10px 10px;\n  }\n\n  #userInputs {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .container {\n    align-items: center;\n    justify-content: center;\n  }\n</style>\n\n<!-- Sets up key handler on the window -->\n<svelte:window on:keydown={handleKeydown} />\n\n<div class=\"container\">\n  <h1>Candy Chomper</h1>\n  <p>\n    You can use the arrow keys or WASD to navigate the grid.\n    <br />\n    Try chomping the candy by pressing space, enter or the chomp button when you find three in a row!\n  </p>\n\n  {#if !completed}\n    <div id=\"userInputs\">\n      <button type=\"submit\" class=\"button is-primary\" on:click={handleSubmit}>Chomp</button>\n      <span>Chomps: {chomps}</span>\n      <span>Moves: {moveCount}</span>\n      <span>Location: ({row}, {column})</span>\n      <span>Time: {seconds} seconds</span>\n    </div>\n  {:else}\n    <CongratsBanner {moveCount} fillCount={chomps} {seconds} on:reset={reset} />\n  {/if}\n\n  <ColorGrid {grid} {teleportEnabled} selectedRow={row} selectedColumn={column} on:select={select} />\n</div>\n",
    "<script lang=\"ts\">import { onDestroy } from 'svelte';\nimport { colorFill, colors, randomGrid, completedGrid, shuffleGrid } from '../../utils/ColorFill';\nimport ColorGrid from './ColorGrid.svelte';\nimport CongratsBanner from './CongratsBanner.svelte';\n// Props\nexport let height = 15;\nexport let width = 15;\n// State\nlet row;\nlet column;\nlet newColor;\nlet fillCount = 0;\nlet moveCount = 0;\nlet completed = false;\nlet teleportEnabled = false;\nlet seconds = 0;\nconst colorOptions = colors.map((c, i) => ({ id: i, color: c }));\n// Init random grid\nlet grid;\ngrid = randomGrid(width, height, 5);\nrow = Math.floor(Math.random() * height);\ncolumn = Math.floor(Math.random() * width);\n// Set up timer\nlet interval = setInterval(onTick, 1000);\nonDestroy(() => clearInterval(interval));\n// Fill the grid\nfunction handleSubmit() {\n    grid = colorFill(grid, { x: column, y: row }, newColor);\n    fillCount++;\n    if (completedGrid(grid)) {\n        completed = true;\n        clearInterval(interval);\n    }\n}\n// Executes every second\nfunction onTick() {\n    seconds++;\n    grid = shuffleGrid(grid);\n}\n// Handle key presses\nfunction handleKeydown(event) {\n    if (!completed) {\n        switch (event.key) {\n            // up\n            case 'ArrowUp':\n            case 'W': {\n                column = column - 1 < 0 ? width - 1 : column - 1;\n                moveCount++;\n                break;\n            }\n            // down\n            case 'ArrowDown':\n            case 'S': {\n                column = column + 1 > width - 1 ? 0 : column + 1;\n                moveCount++;\n                break;\n            }\n            // left\n            case 'ArrowLeft':\n            case 'A': {\n                row = row - 1 < 0 ? height - 1 : row - 1;\n                moveCount++;\n                break;\n            }\n            // right\n            case 'ArrowRight':\n            case 'D': {\n                row = row + 1 > height - 1 ? 0 : row + 1;\n                moveCount++;\n                break;\n            }\n            case 'Enter': {\n                // enter\n                handleSubmit();\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n}\n// Reset state\nfunction reset() {\n    row = 0;\n    column = 0;\n    fillCount = 0;\n    moveCount = 0;\n    completed = false;\n    grid = randomGrid(width, height, 5);\n    seconds = 0;\n    setInterval(() => onTick, 1000);\n}\n// Moves directly to given location\nfunction select(event) {\n    row = event.detail.x;\n    column = event.detail.y;\n}\n</script>\n\n<style>\n  select,\n  label {\n    flex: 0 0;\n    width: 60px;\n    margin: 5px;\n    display: flex;\n  }\n\n  span,\n  button,\n  input {\n    margin: 10px 10px;\n  }\n  .emojiPicker {\n    height: 40px;\n    width: 70px;\n  }\n\n  #userInputs {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .container {\n    align-items: center;\n    justify-content: center;\n  }\n</style>\n\n<svelte:window on:keydown={handleKeydown} />\n\n<div class=\"container\">\n  <h1>Controls:</h1>\n  <br />\n  <p>Use the arrow keys or WASD to navigate the grid</p>\n  <p>Press enter, space or the fill button to fill all cells that match the color of your location</p>\n  <p>Cheat will let you click to teleport without counting it as a move</p>\n\n  {#if !completed}\n    <div id=\"userInputs\">\n      <label for=\"newColor\">Color</label>\n      <select bind:value={newColor} class=\"emojiPicker\">\n        {#each colorOptions as option}\n          <option value={option.color}>{option.color}</option>\n        {/each}\n      </select>\n\n      <button type=\"submit\" class=\"button is-primary\" on:click={handleSubmit}>Fill</button>\n      <span>Fills: {fillCount}</span>\n      <span>Moves: {moveCount}</span>\n      <span>Location: ({row}, {column})</span>\n      <span>Time: {seconds} seconds</span>\n\n      <input bind:checked={teleportEnabled} type=\"checkbox\" class=\"checkbox\" />\n      <label for=\"cheatToggle\">Cheat</label>\n    </div>\n  {:else}\n    <CongratsBanner {moveCount} {fillCount} {seconds} on:reset={reset} />\n  {/if}\n\n  <ColorGrid {grid} {teleportEnabled} selectedRow={row} selectedColumn={column} on:select={select} />\n</div>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\nconst dispatch = createEventDispatcher();\n// Props\nexport let grid;\nexport let selectedRow;\nexport let selectedColumn;\nexport let teleportEnabled;\n</script>\n\n<style>\n  ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  li {\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n\n  .selected {\n    list-style-position: inside;\n    border: 2px solid black;\n    background: yellow;\n  }\n\n  #grid {\n    position: relative;\n    margin-top: 30px;\n    border-radius: 25px;\n    text-align: center;\n  }\n\n  .row {\n    display: inline-block;\n    text-align: center;\n    padding: 10px;\n    text-decoration: none;\n  }\n</style>\n\n<div id=\"grid\">\n  <ul>\n    {#each grid as row, idx1}\n      <ul class=\"row\">\n        {#each row as _col, idx2}\n          {#if teleportEnabled}\n            <li\n              class={idx1 === selectedRow && idx2 === selectedColumn ? 'selected' : ''}\n              on:click={() => dispatch('select', { x: idx1, y: idx2 })}>\n              {grid[idx2][idx1]}\n            </li>\n          {:else}\n            <li class={idx1 === selectedRow && idx2 === selectedColumn ? 'selected' : ''}>{grid[idx2][idx1]}</li>\n          {/if}\n        {/each}\n      </ul>\n    {/each}\n  </ul>\n</div>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\nexport let fillCount;\nexport let moveCount;\nexport let seconds;\nconst dispatch = createEventDispatcher();\n</script>\n\n<style>\n  button {\n    margin: 10px 10px;\n  }\n</style>\n\n<div class=\"modal is-active\">\n  <div class=\"modal-background\" />\n  <div class=\"modal-card\">\n    <header class=\"modal-card-head\">\n      <p class=\"modal-card-title\">You Won!</p>\n    </header>\n    <section class=\"modal-card-body\">\n      <!-- Content ... -->\n      <h1>Congrats you did it in {seconds} seconds, {moveCount} moves and {fillCount} fills!</h1>\n      <button class=\"button is-primary\" on:click={() => dispatch('reset')}>Reset</button>\n      <button class=\"modal-close is-large\" aria-label=\"close\" />\n    </section>\n  </div>\n  <!-- <div class=\"modal-content\" id=\"congrats\">\n  </div> -->\n</div>\n",
    "<script lang=\"ts\">import { onMount } from 'svelte';\nimport { fly, slide } from 'svelte/transition';\nimport { sineInOut, sineOut } from 'svelte/easing';\nimport CardList from './CardList.svelte';\nimport { decideMove, computeScore, cardCount } from '../../utils/BasicStrategy';\nconst localBucket = window.localStorage;\n// --------BlackJack Actions -----------\nconst hit = (hand, bustFunc, who) => {\n    hand = [...hand, drawCard()];\n    switch (who) {\n        case 'User':\n            userCards = hand;\n            break;\n        case 'Dealer':\n            dealerCards = hand;\n            break;\n        case 'Left':\n            leftHand = hand;\n            break;\n        case 'Right':\n            rightHand = hand;\n            break;\n    }\n    if (isBusted(hand)) {\n        bustFunc();\n    }\n    else {\n        hint = donsHint(hand, dealerCards[0]);\n    }\n};\nconst stay = () => {\n    lockedIn = true;\n    dealerCards = playOutDealerHand();\n    if (isBusted(dealerCards) ||\n        computeScore(userCards) > computeScore(dealerCards) ||\n        computeScore(userCards) === 21) {\n        userWon = true;\n        push = false;\n        balance += bet * 2;\n    }\n    else if (computeScore(userCards) === computeScore(dealerCards)) {\n        userWon = false;\n        push = true;\n        balance += bet;\n    }\n};\nconst doubleDown = (hand, hitFunc, stayFunction) => {\n    balance -= bet;\n    bet *= 2;\n    let bustFunc = split\n        ? leftHandDone\n            ? () => {\n                leftHandDone = true;\n            }\n            : handleSplitBust\n        : handleBust;\n    hitFunc(hand, bustFunc, 'User');\n    if (!isBusted(hand)) {\n        stayFunction();\n    }\n    bet /= 2;\n};\nconst splitHand = () => {\n    leftHand = [userCards[0], drawCard()];\n    rightHand = [userCards[1], drawCard()];\n    userCards = [];\n    split = true;\n    balance -= bet;\n    if (leftHand[0].name === 'Ace') {\n        leftHandDone = true;\n        rightHandDone = true;\n        stayRight();\n    }\n    else {\n        hint = donsHint(leftHand, dealerCards[0]);\n    }\n};\nconst stayLeft = () => {\n    leftHandDone = true;\n    hint = donsHint(rightHand, dealerCards[0]);\n};\nconst stayRight = () => {\n    rightHandDone = true;\n    lockedIn = true;\n    dealerCards = playOutDealerHand();\n    let leftWon = false;\n    let leftPush = false;\n    let rightWon = false;\n    let rightPush = false;\n    // * Check left hand\n    if (!isBusted(leftHand) &&\n        (isBusted(dealerCards) || computeScore(leftHand) > computeScore(dealerCards) || computeScore(leftHand) === 21)) {\n        balance += bet * 2;\n        leftWon = true;\n    }\n    else if (computeScore(leftHand) === computeScore(dealerCards)) {\n        balance += bet;\n        leftPush = false;\n    }\n    // * Check right hand\n    if (isBusted(dealerCards) ||\n        computeScore(rightHand) > computeScore(dealerCards) ||\n        computeScore(rightHand) === 21) {\n        balance += bet * 2;\n        rightWon = true;\n    }\n    else if (computeScore(rightHand) === computeScore(dealerCards)) {\n        balance += bet;\n        rightPush = true;\n    }\n    if ((leftWon && rightWon) || (leftWon && rightPush) || (leftPush && rightWon)) {\n        userWon = true;\n        push = false;\n    }\n    else if ((leftWon && !rightWon) || (!leftWon && rightWon)) {\n        userWon = false;\n        push = true;\n    }\n};\n// ------ Click Handlers ----------\nconst handleHit = (hand, hitFunc, who) => {\n    checkForCorrectMove('Hit', hand);\n    hitFunc(hand, handleBust, who);\n};\nconst handleStay = (hand, stayFunc) => {\n    checkForCorrectMove('Stay', hand);\n    stayFunc();\n};\nconst handleSplitHand = () => {\n    checkForCorrectMove('Split', userCards);\n    splitHand();\n};\nconst handleDoubleDown = (hand, hitFunc, stayFunc, who) => {\n    checkForCorrectMove('DoubleDown', hand);\n    doubleDown(hand, () => hitFunc(hand, handleBust, who), stayFunc);\n};\nconst handlePeek = () => {\n    peekDealer = !peekDealer;\n};\nconst nextHand = () => {\n    balance -= bet;\n    lockedIn = false;\n    split = false;\n    userWon = false;\n    push = false;\n    wonInsurance = false;\n    betOnInsurance = false;\n    leftHandDone = false;\n    rightHandDone = false;\n    userCards = [drawCard(), drawCard()];\n    dealerCards = [drawCard(), drawCard()];\n    insuranceOpen = dealerCards[0].name === 'Ace' && computeScore(userCards) !== 21;\n    canSplit = userCards[0].name === userCards[1].name;\n    hint = donsHint(userCards, dealerCards[0]);\n    if (deck.length < 15) {\n        deck = shuffle(newDeck());\n        deckCount = 0;\n    }\n    // * Write to local storage\n    localBucket.setItem('Balance', balance.toString());\n};\nconst toggleHint = () => {\n    hintEnabled = !hintEnabled;\n    if (hintEnabled) {\n        hideInfoMessage = false;\n    }\n};\nconst handleInsurance = () => {\n    lockedIn = true;\n    betOnInsurance = true;\n    if (computeScore(dealerCards) === 21) {\n        wonInsurance = true;\n        userWon = false;\n        push = false;\n    }\n    else {\n        wonInsurance = false;\n        balance -= insuranceBet;\n        lockedIn = false;\n        setTimeout(() => {\n            insuranceOpen = false;\n            hint = donsHint(userCards, dealerCards[0]);\n        }, 2000);\n    }\n    hint = donsHint(userCards, dealerCards[0]);\n};\nconst denyInsurance = () => {\n    if (computeScore(dealerCards) === 21) {\n        wonInsurance = false;\n        userWon = false;\n        push = false;\n        stay();\n    }\n    insuranceOpen = false;\n    hint = donsHint(userCards, dealerCards[0]);\n};\n// ------- Utils ------------\nconst newDeck = () => {\n    let result = new Array();\n    const suites = ['❤️', '♦', '♣️', '♠️'];\n    suites.forEach((suite) => {\n        for (let i = 2; i <= 14; i++) {\n            result.push(indexToCard(i, suite));\n        }\n    });\n    return result;\n};\nconst drawCard = () => {\n    const card = deck[0];\n    deck = deck.slice(1);\n    deckCount += cardCount(card);\n    return card;\n};\nconst shuffle = (deck) => {\n    return deck.sort(() => Math.random() - 0.5);\n};\nconst indexToCard = (idx, suite) => {\n    switch (idx) {\n        case 2:\n            return { name: 'Two', value: idx, optionalValue: null, suite: suite };\n        case 3:\n            return { name: 'Three', value: idx, optionalValue: null, suite: suite };\n        case 4:\n            return { name: 'Four', value: idx, optionalValue: null, suite: suite };\n        case 5:\n            return { name: 'Five', value: idx, optionalValue: null, suite: suite };\n        case 6:\n            return { name: 'Six', value: idx, optionalValue: null, suite: suite };\n        case 7:\n            return { name: 'Seven', value: idx, optionalValue: null, suite: suite };\n        case 8:\n            return { name: 'Eight', value: idx, optionalValue: null, suite: suite };\n        case 9:\n            return { name: 'Nine', value: idx, optionalValue: null, suite: suite };\n        case 10:\n            return { name: 'Ten', value: idx, optionalValue: null, suite: suite };\n        case 11:\n            return { name: 'Jack', value: 10, optionalValue: null, suite: suite };\n        case 12:\n            return { name: 'Queen', value: 10, optionalValue: null, suite: suite };\n        case 13:\n            return { name: 'King', value: 10, optionalValue: null, suite: suite };\n        case 14:\n            return { name: 'Ace', value: 11, optionalValue: 1, suite: suite };\n        default:\n            throw new Error('Bad card value');\n    }\n};\nconst cardToImage = (card) => {\n    return card.value < 10 || card.name === 'Ten'\n        ? card.value + suitePrefix(card.suite)\n        : card.name[0] + suitePrefix(card.suite);\n};\nconst suitePrefix = (suite) => {\n    switch (suite) {\n        case '❤️':\n            return 'H';\n        case '♠️':\n            return 'S';\n        case '♣️':\n            return 'C';\n        case '♦':\n            return 'D';\n        default:\n            throw new Error('Bad suite');\n    }\n};\nconst isBusted = (cards) => {\n    return computeScore(cards) > 21;\n};\nconst playOutDealerHand = () => {\n    while (!isBusted(dealerCards) && computeScore(dealerCards) < 17) {\n        const newCard = drawCard();\n        dealerCards = [...dealerCards, newCard];\n        deckCount += cardCount(newCard);\n    }\n    return dealerCards;\n};\nconst handleBust = () => {\n    lockedIn = true;\n    userWon = false;\n    push = false;\n};\nconst handleSplitBust = () => {\n    rightHandDone = true;\n    lockedIn = true;\n    if (!isBusted(leftHand) &&\n        (isBusted(dealerCards) || computeScore(leftHand) > computeScore(dealerCards) || computeScore(leftHand) === 21)) {\n        userWon = false;\n        push = true;\n    }\n    else if (computeScore(leftHand) === computeScore(dealerCards)) {\n        userWon = false;\n        push = false;\n    }\n};\nconst handleKeydown = (event) => {\n    switch (event.key) {\n        case 'Enter':\n            if (lockedIn) {\n                nextHand();\n            }\n            break;\n        case 'ArrowLeft':\n        case 'a':\n            if (!lockedIn && !split) {\n                handleStay(userCards, stay);\n            }\n            if (split && !leftHandDone) {\n                handleStay(leftHand, stayLeft);\n            }\n            else if (split && leftHandDone && !rightHandDone) {\n                handleStay(rightHand, stayRight);\n            }\n            break;\n        case 'ArrowRight':\n        case 'd':\n            if (!lockedIn && !split) {\n                handleHit(userCards, () => hit(userCards, handleBust, 'User'), 'User');\n            }\n            if (split && !leftHandDone) {\n                handleHit(leftHand, () => hit(leftHand, handleSplitBust, 'Left'), 'Left');\n            }\n            else if (split && leftHandDone && !rightHandDone) {\n                handleHit(rightHand, () => hit(rightHand, handleSplitBust, 'Right'), 'Right');\n            }\n            break;\n        case 'ArrowUp':\n        case 'w':\n            if (canSplit && !split) {\n                handleSplitHand();\n            }\n            break;\n        case 'ArrowDown':\n        case 's':\n            if (!lockedIn && userCards.length === 2 && !split) {\n                handleDoubleDown(userCards, () => hit(userCards, handleBust, 'User'), stay, 'User');\n            }\n            if (split && !leftHandDone) {\n                handleDoubleDown(leftHand, () => hit(leftHand, handleSplitBust, 'Left'), stayLeft, 'Left');\n            }\n            else if (split && leftHandDone && !rightHandDone) {\n                handleDoubleDown(rightHand, () => hit(rightHand, handleSplitBust, 'Right'), stayRight, 'Right');\n            }\n            break;\n        default:\n            break;\n    }\n};\nconst donsHint = (userCards, dealerUpCard) => {\n    if (insuranceOpen) {\n        hintColor = 'is-info';\n        return \"Most of the time insurance is a bad bet. Only go for it if you really think they've got 21\";\n    }\n    let decision = decideMove(userCards, dealerUpCard, !split);\n    switch (decision) {\n        case 'Stay':\n            hintColor = 'is-danger';\n            return 'Better to play it safe on this one and stay';\n        case 'Hit':\n            hintColor = 'is-primary';\n            return 'The smart thing to do here is to hit!';\n        case 'DoubleDown':\n            hintColor = 'is-success';\n            return \"Things are looking good I'd double down on this one 💰!\";\n        case 'Split':\n            hintColor = 'is-warning';\n            return 'Splitting looks like your best option!';\n    }\n};\nconst checkForCorrectMove = (move, cards) => {\n    const correctDecision = decideMove(cards, dealerCards[0], !split);\n    if (move === correctDecision) {\n        correctDecisions += 1;\n    }\n    handsPlayed += 1;\n};\n// ----------- State -----------\nlet balance = 100;\nlet bet = 10;\nlet deckCount = 0;\nlet peekDealer = false;\nlet lockedIn = false;\nlet split = false;\nlet hintEnabled = false;\nlet userWon = false;\nlet push = false;\nlet leftHandDone = false;\nlet rightHandDone = false;\nlet hintColor = 'is-info';\nlet handsPlayed = 1;\nlet correctDecisions = 1;\nlet hideInfoMessage = false;\nlet hideInfoTip = false;\nlet insuranceBet = Math.floor(bet / 2);\nlet deck = shuffle(newDeck());\nlet dealerCards = [drawCard(), drawCard()];\nlet userCards = [drawCard(), drawCard()];\nlet insuranceOpen = dealerCards[0].name === 'Ace' && computeScore(userCards) !== 21;\nlet canSplit = userCards[0].name === userCards[1].name;\nlet leftHand = [];\nlet rightHand = [];\nlet hint = donsHint(userCards, dealerCards[0]);\nlet wonInsurance = false;\nlet betOnInsurance = false;\n// Load in balance from localStorage on component mounting\nonMount(() => {\n    const storageValue = localBucket.getItem('Balance');\n    if (storageValue === null) {\n        localBucket.setItem('Balance', balance.toString());\n    }\n    else {\n        balance = parseInt(storageValue || '');\n    }\n});\n</script>\n\n<style>\n  button {\n    margin: 5px 5px 5px 5px;\n  }\n\n  li {\n    margin-left: 15px;\n  }\n\n  hr {\n    margin-top: 15px;\n    width: 85%;\n  }\n\n  :disabled {\n    pointer-events: none;\n  }\n\n  .subtitle {\n    margin-bottom: 0.5rem !important;\n  }\n\n  .tag {\n    margin-top: 5px;\n  }\n\n  .fa-dollar-sign {\n    margin-bottom: 20px;\n  }\n\n  #bet {\n    width: 100px;\n    margin-top: 5px;\n  }\n\n  #insuranceBet {\n    width: 100px;\n    margin-top: 5px;\n  }\n\n  #upNext {\n    margin-top: 80px;\n  }\n\n  #correctPct {\n    width: 300px;\n    margin-left: 10px;\n    margin-right: 10px;\n    margin-top: 5px;\n  }\n\n  #controlBar {\n    margin-left: 15vw;\n  }\n</style>\n\n<svelte:window on:keydown={handleKeydown} />\n\n<div class=\"columns is-mobile is-centered\" id=\"blackJackContainer\">\n  <div class=\"column is-11\">\n    <h1 class=\"title is-centered\">BlackJack</h1>\n\n    <h2 class=\"subtitle\">\n      {peekDealer || lockedIn ? `Dealer's Hand : ${computeScore(dealerCards)}` : `Dealer's Hand`}\n    </h2>\n\n    <CardList cards={dealerCards.map((c) => cardToImage(c))} visible={peekDealer || lockedIn ? true : undefined} />\n    <hr />\n\n    {#if split}\n      <h2 class=\"subtitle is-primary\">\n        Left Hand :\n        {computeScore(leftHand)}\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        Right Hand :\n        {computeScore(rightHand)}\n      </h2>\n    {:else}\n      <h2 class=\"subtitle\">Your Hand : {computeScore(userCards)}</h2>\n    {/if}\n\n    {#if split}\n      <ul>\n        <CardList cards={leftHand.map((c) => cardToImage(c))} />\n        <span style=\"display:inline-block; width: 200px;\" />\n        <CardList cards={rightHand.map((c) => cardToImage(c))} />\n      </ul>\n    {:else}\n      <CardList cards={userCards.map((c) => cardToImage(c))} />\n    {/if}\n\n    <hr />\n    <!-- Message Fly-In -->\n    {#if lockedIn}\n      <div\n        class={`notification is-narrow ${userWon ? 'is-success' : push ? 'is-info' : 'is-danger'}`}\n        transition:fly={{ x: -1000, y: 0, easing: sineInOut, opacity: 0, duration: 500, delay: 200 }}>\n        <span class={`tag is-large ${userWon ? 'is-success' : push ? 'is-info' : 'is-danger'}`} id=\"wonOrLost\">\n          <strong>{userWon ? 'You Won!' : push ? 'You Tied!' : 'You Lost!'}</strong>\n        </span>\n\n        <span class=\"control has-icons-left\">\n          <input\n            class=\"input is-info\"\n            type=\"number\"\n            id=\"bet\"\n            name=\"bet\"\n            bind:value={bet}\n            disabled={!lockedIn}\n            min={1}\n            max={balance} />\n\n          <span class=\"icon is-small is-left\">\n            <i class=\"fa fa-dollar-sign\" id=\"betDollarSign\" />\n          </span>\n        </span>\n        <button class=\"button is-info is-outlined is-light\" on:click={nextHand}>\n          <span>Next Hand</span>\n          <span class=\"icon is-small\">\n            <i class=\"fas fa-angle-double-right\" />\n          </span>\n        </button>\n\n        <span>(or press enter)</span>\n      </div>\n    {/if}\n\n    <!-- Control Bar -->\n    <div class=\"is-centered box\" id=\"controlBar\">\n\n      {#if insuranceOpen}\n        <div class=\"field is-horizontal\">\n          <div transition:fly={{ x: -1000, y: 0, easing: sineInOut, delay: 0, opacity: 0, duration: 500 }}>\n            <span class=\"tag is-large is-info\">Insurance ?</span>\n            <span class=\"control has-icons-left\">\n              <input\n                class=\"input is-info\"\n                type=\"number\"\n                id=\"insuranceBet\"\n                name=\"insuranceBet\"\n                bind:value={insuranceBet}\n                max={Math.floor(bet / 2)}\n                min={1} />\n\n              <span class=\"icon is-small is-left\">\n                <i class=\"fa fa-dollar-sign\" />\n              </span>\n            </span>\n\n            <button class=\"button is-success is-outlined\" on:click={handleInsurance}>\n              <span class=\"icon is-small\">\n                <i class=\"fas fa-check\" />\n              </span>\n            </button>\n\n            <button class=\"button is-danger is-outlined\" on:click={denyInsurance}>\n              <span class=\"icon is-small\">\n                <i class=\"fas fa-times\" />\n              </span>\n            </button>\n\n            {#if wonInsurance}\n              <span\n                class=\"icon is-small\"\n                in:fly={{ x: 0, y: -1000, easing: sineInOut, delay: 0, opacity: 0, duration: 500 }}\n                out:fly={{ x: 0, y: -1000, easing: sineInOut, delay: 0, opacity: 0,duration: 500 }}>\n                <i class=\"fas fa-coins\" />\n              </span>\n\n              <span\n                class={`tag is-light is-success is-medium`}\n                id=\"infoTag\"\n                transition:fly={{ x: 1000, y: 0, duration: 500, delay: 0, opacity: 0, easing: sineOut}}>\n                You won ${insuranceBet} from the insurance side bet even though you lost the hand.\n              </span>\n            {/if}\n\n            {#if betOnInsurance && !wonInsurance}\n              <span\n                class={`tag is-light is-danger is-medium`}\n                id=\"infoTag\"\n                transition:fly={{ x: 1000, y: 0, duration: 500, delay: 500, easing: sineInOut, opacity: 0}}>\n                You lost ${insuranceBet} from the insurance side bet. Don't worry you've still got a chance!\n              </span>\n            {/if}\n\n          </div>\n\n        </div>\n      {:else}\n        <div class=\"field is-horizontal\" transition:fly={{ x: 2000, y: 0, easing: sineInOut, duration: 500, delay: 200, opacity: 0}}>\n          <div>\n\n            {#if split}\n              <button\n                class=\"button is-danger is-outlined\"\n                on:click={() => handleStay(leftHand, stayLeft)}\n                disabled={leftHandDone || isBusted(leftHand)}>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-chevron-left\" />\n                </span>\n                <span>Stay 1</span>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-hand-paper\" />\n                </span>\n              </button>\n              <button\n                class=\"button is-success is-outlined\"\n                on:click={() => handleDoubleDown(leftHand, () => hit(leftHand, handleSplitBust, 'Left'), stayLeft, 'Left')}\n                disabled={leftHandDone || leftHand.length > 2}>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-chevron-down\" />\n                </span>\n                <span>Double 1</span>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-coins\" />\n                </span>\n              </button>\n              <button\n                class=\"button is-primary is-outlined\"\n                on:click={() => handleHit(leftHand, () => hit(leftHand, handleSplitBust, 'Left'), 'Left')}\n                disabled={leftHandDone || isBusted(leftHand)}>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-hand-holding-medical\" />\n                </span>\n                <span>Hit 1</span>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-chevron-right\" />\n                </span>\n              </button>\n\n              <button\n                class=\"button is-danger is-outlined\"\n                on:click={() => handleStay(rightHand, stayRight)}\n                disabled={!(leftHandDone || isBusted(leftHand)) || rightHandDone || isBusted(rightHand)}>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-chevron-left\" />\n                </span>\n                <span>Stay 2</span>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-hand-paper\" />\n                </span>\n              </button>\n              <button\n                class=\"button is-success is-outlined\"\n                on:click={() => handleDoubleDown(rightHand, () => hit(rightHand, handleSplitBust, 'Right'), stayRight, 'Right')}\n                disabled={!leftHandDone || rightHand.length > 2 || rightHandDone}>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-chevron-down\" />\n                </span>\n                <span>Double 2</span>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-coins\" />\n                </span>\n              </button>\n              <button\n                class=\"button is-primary is-outlined\"\n                on:click={() => handleHit(rightHand, () => hit(rightHand, handleSplitBust, 'Right'), 'Right')}\n                disabled={!(leftHandDone || isBusted(leftHand) || isBusted(rightHand)) || rightHandDone}>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-hand-holding-medical\" />\n                </span>\n                <span>Hit 2</span>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-chevron-right\" />\n                </span>\n              </button>\n            {:else}\n              <button\n                class=\"button is-danger is-outlined\"\n                on:click={() => handleStay(userCards, stay)}\n                disabled={lockedIn}>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-chevron-left\" />\n                </span>\n                <span>Stay</span>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-hand-paper\" />\n                </span>\n              </button>\n\n              <button\n                class=\"button is-success is-outlined\"\n                on:click={() => handleDoubleDown(userCards, () => hit(userCards, handleBust, 'User'), stay, 'User')}\n                disabled={lockedIn || userCards.length !== 2}>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-chevron-down\" />\n                </span>\n                <span>Double</span>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-coins\" />\n                </span>\n              </button>\n\n              <button\n                class=\"button is-warning is-outlined\"\n                id=\"splitButton\"\n                on:click={handleSplitHand}\n                disabled={!canSplit || split}>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-chevron-up\" />\n                </span>\n                <span>Split</span>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-expand-alt\" />\n                </span>\n              </button>\n\n              <button\n                class=\"button is-primary is-outlined\"\n                on:click={() => handleHit(userCards, () => hit(userCards, handleBust, 'User'), 'User')}\n                disabled={lockedIn}>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-hand-holding-medical\" />\n                </span>\n                <span>Hit</span>\n                <span class=\"icon is-small\">\n                  <i class=\"fas fa-chevron-right\" />\n                </span>\n              </button>\n            {/if}\n\n          </div>\n\n        </div>\n      {/if}\n\n      <div class=\"field is-horizontal\">\n        <div>\n\n          <span class={`tag is-large ${balance >= 0 ? 'is-success' : 'is-danger'}`}>Balance: $ {balance}</span>\n\n          {#if lockedIn && userWon}\n            <span\n              class=\"icon is-small\"\n              in:fly={{ x: 0, y: -1000, duration: 500, delay: 0, easing: sineInOut, opacity: 0}}\n              out:fly={{ x: 0, y: -1000, duration: 500, delay: 800, easing: sineOut, opacity: 0}}>\n              <i class=\"fas fa-coins\" />\n            </span>\n          {/if}\n\n          <button\n            class=\"button is-primary has-tooltip-multiline\"\n            id=\"hint\"\n            on:click={toggleHint}\n            data-tooltip=\"Helpful hint\">\n            <span>{hintEnabled ? 'Fly Solo' : 'Ask Don'}</span>\n            <span class=\"icon is-small\">\n              <i class={`fas fa-${hintEnabled ? 'plane' : 'question-circle'}`} />\n            </span>\n          </button>\n\n          {#if hintEnabled}\n            <span class={`tag ${hintColor} is-light is-large subtitle`} transition:fly={{ x: 2000, y:0, duration: 500, delay: 0, easing: sineInOut, opacity: 0 }}>\n              {hint}\n            </span>\n          {/if}\n\n        </div>\n\n      </div>\n\n      <div class=\"field is-horizontal\">\n        <label for=\"correctPct\">Basic Strategy Correctness</label>\n        <progress\n          id=\"correctPct\"\n          class=\"progress is-primary\"\n          value={Math.floor((correctDecisions / handsPlayed) * 100)}\n          max=\"100\" />\n        <span>{Math.floor((correctDecisions / handsPlayed) * 100)}%</span>\n      </div>\n\n      <div class=\"field is-horizontal\">\n        <span class={`tag is-light is-medium ${deckCount < 0 ? 'is-danger' : deckCount > 0 ? 'is-success' : ''}`}>\n          <p class=\"subtitle\">Count: {deckCount}</p>\n        </span>\n        {#if hintEnabled}\n          {#if !hideInfoMessage}\n            <span class={`tag is-light is-medium`} id=\"infoTag\" transition:fly={{ x: 2000, y: 0, duration: 500, delay: 0, easing: sineInOut, opacity: 0 }}>\n              Don's hints are purely based on basic strategy he can't see any of the cards in the deck!\n              <button\n                class=\"delete\"\n                on:click={() => {\n                  hideInfoMessage = true\n                }} />\n            </span>\n          {/if}\n        {/if}\n      </div>\n      <div class=\"field is-horizontal\">\n        {#if !hideInfoTip}\n          <span class={`tag is-info is-light is-medium`} id=\"infoTag\" transition:fly={{ x: -2000, y: 0, duration: 500, delay: 0, easing: sineInOut, opacity: 0 }}>\n            Tip: Use the arrow keys or WASD as an alternative to pressing the buttons (use the arrow icons on the\n            buttons as a legend)\n            <button\n              class=\"delete\"\n              on:click={() => {\n                hideInfoTip = true\n              }} />\n          </span>\n        {/if}\n      </div>\n    </div>\n  </div>\n\n  <!-- Deck to Peek from -->\n  <div class=\"column is-1\">\n    {#if peekDealer}\n      <ul>\n        {#each deck.slice(0, 5).reverse() as card}\n          <li transition:slide={{ x: 0, y: 0, delay: 0, duration: 200, easing: sineInOut, opacity: 0}}>\n            <figure class=\"image is-64x64\">\n              <img src={`/images/${cardToImage(card)}.jpg`} alt=\"playing card\" />\n            </figure>\n          </li>\n        {/each}\n      </ul>\n    {:else}\n      <ul>\n        {#each deck.slice(0, 5).reverse() as _card}\n          <li transition:slide={{ delay: 0, duration: 200, easing: sineInOut }}>\n            <figure class=\"image is-64x64\">\n              <img src={`/images/Gray_back.jpg`} alt=\"playing card\" />\n            </figure>\n          </li>\n        {/each}\n      </ul>\n    {/if}\n    <span class=\"tag is-primary is-light is-medium\" id=\"upNext\">\n      <span class=\"icon\">\n        <i class=\"fas fa-arrow-up\" />\n      </span>\n      <p class=\"subtitle\">Up Next</p>\n    </span>\n\n    <button class=\"button is-dark is-outlined\" on:click={handlePeek}>\n\n      <span>{peekDealer ? 'Play Clean' : 'Cheat'}</span>\n      <span class=\"icon is-small\">\n        <i class={`fas fa-eye${peekDealer ? '-slash' : ''}`} />\n      </span>\n    </button>\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\nimport { fly } from 'svelte/transition';\nimport { sineInOut } from 'svelte/easing';\nexport let cards = new Array();\nexport let visible = true;\nconst dispatch = createEventDispatcher();\n</script>\n\n<style>\n  li {\n    display: inline-block;\n    margin: 5px 5px 30px 5px;\n  }\n</style>\n\n{#each cards as card, idx (card + idx)}\n  <li\n    in:fly={{ x: (idx === 0 ? -1 : 1) * 2000, y: 0, easing: sineInOut, duration: 500, delay: 300, opacity: 0 }}\n    out:fly={{ x: -2000, y: 0, easing: sineInOut, duration: 800, delay: 0, opacity: 0 }}\n    on:outroend={() => dispatch('gone', { card: card })}>\n    <div class=\"card\">\n      <div class=\"card-image\">\n        <figure class=\"image is-96x96\">\n          {#if visible || idx === 0}\n            <img src={`/images/${card}.jpg`} alt=\"playing card\" />\n          {:else}<img src=\"/images/Gray_back.jpg\" alt=\"playing card\" />{/if}\n        </figure>\n      </div>\n    </div>\n  </li>\n{/each}\n",
    "<script lang=\"ts\">export let value = 0;\nexport let step = 1;\n</script>\n\n<style>\n  button {\n    margin-left: 10px;\n    margin-right: 10px;\n  }\n</style>\n\n<div>\n  <div>\n    <button class=\"button\" on:click={() => (value += step)}>➕</button>\n    <span>{value}</span>\n    <button class=\"button\" on:click={() => (value -= step)}>➖</button>\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { fly } from 'svelte/transition';\nimport { onMount } from 'svelte';\nimport Chart from 'chart.js';\nimport maxProfit from '../../utils/ProfitOptimizer';\nimport { sineInOut } from 'svelte/easing';\nexport let prices = [0];\nexport let newPrice = 0;\nexport let availableBuys = 1;\nlet canvas;\nlet chart;\nlet editRowIndex = -1;\nexport let profit = 0;\nconst setProfit = (prices, availableBuys) => {\n    profit = maxProfit(prices, availableBuys);\n};\nconst addPrice = () => {\n    prices = [...prices, newPrice];\n    setProfit(prices, availableBuys);\n    chart.destroy();\n    chart = generateChart();\n};\nconst generateChart = () => {\n    const ctx = canvas.getContext('2d');\n    return new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: prices.map((_p, i) => i),\n            datasets: [\n                {\n                    label: 'Stock Price',\n                    data: prices,\n                    backgroundColor: 'rgb(0, 209, 178, 0.2)',\n                    borderColor: 'rgb(0, 209, 178, 1)',\n                    borderWidth: 1,\n                },\n            ],\n        },\n        options: {\n            scales: {\n                yAxes: [\n                    {\n                        ticks: {\n                            beginAtZero: true,\n                        },\n                    },\n                ],\n            },\n        },\n    });\n};\nconst clearPrices = () => {\n    prices = [0];\n    setProfit(prices, availableBuys);\n    chart.destroy();\n    chart = generateChart();\n};\nconst handleChange = (event) => {\n    availableBuys = parseInt(event.target.value);\n    setProfit(prices, availableBuys);\n};\nconst editPrice = (day) => {\n    editRowIndex = day;\n};\nconst savePrice = () => {\n    editRowIndex = -1;\n    setProfit(prices, availableBuys);\n    chart.destroy();\n    chart = generateChart();\n};\nconst deleteDay = (day) => {\n    prices = prices.slice(0, day).concat(prices.slice(day + 1));\n    setProfit(prices, availableBuys);\n    chart.destroy();\n    chart = generateChart();\n};\nonMount(() => {\n    chart = generateChart();\n});\n</script>\n\n<style>\n  label {\n    margin-right: 15px;\n  }\n  input {\n    width: 80px;\n  }\n</style>\n\n<div>\n  <h1>Max Profit Calculator</h1>\n  <p>Add a few stocks, adjust the number of trades and calculate the max profit during that time period.</p>\n  <hr />\n\n  <div class=\"columns\">\n    <div class=\"column is-half\"><canvas id=\"stockChart\" bind:this={canvas} /></div>\n\n    <div class=\"column is-half\">\n      <div class=\"field is-horizontal\">\n        <div class=\"field-label is-expanded\"><label for=\"stockPrices\" class=\"label\">Stock Price</label></div>\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <p class=\"control is-expanded has-icons-left\">\n              <input class=\"input is-info\" type=\"number\" name=\"newPrice\" bind:value={newPrice} />\n\n              <span class=\"icon is-small is-left\"> <i class=\"fa fa-dollar-sign\" /> </span>\n              <button class=\"button is-info\" on:click={() => addPrice()}>Add ➕</button>\n              <span class=\"tag is-primary is-large\">Profit: $ {profit}</span>\n            </p>\n          </div>\n          <div class=\"field-label\"><label for=\"trades\" class=\"label\">Trades</label></div>\n          <div class=\"field\">\n            <p class=\"control is-expanded has-icons-left\">\n              <input\n                class=\"input is-info\"\n                type=\"number\"\n                name=\"availableBuys\"\n                value={availableBuys}\n                on:change={handleChange} />\n              <span class=\"icon is-small is-left\"> <i class=\"fa fa-sync\" /> </span>\n              <button class=\"button is-light\" on:click={clearPrices}>Clear</button>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n      <ul>\n        {#each prices as price, day}\n          <li transition:fly={{ x: 0, y: 200, duration: 500, delay: 0, easing: sineInOut, opacity: 0.5 }}>\n            <span>\n              Day\n              {day}\n              {#if day === editRowIndex}\n                <!-- <p class=\"control is-expanded\"> -->\n                <input bind:value={price} type=\"number\" class=\"input is-info\" />\n              {:else}$ {price}{/if}\n              <!-- <p class=\"control\"> -->\n              {#if day === editRowIndex}\n                <button class=\"button is-small is-light is-success\" on:click={savePrice}>✅ Save</button>\n              {:else}\n                <button class=\"button is-small is-light is-success\" on:click={() => editPrice(day)}>✏️ Edit</button>\n              {/if}\n              <!-- </p> -->\n              <!-- <p class=\"control\"> -->\n              <button class=\"button is-small is-light is-danger\" on:click={() => deleteDay(day)}>🗑️ Delete</button>\n              <!-- </p> -->\n            </span>\n          </li>\n        {/each}\n      </ul>\n    </div>\n  </div>\n</div>\n",
    "<script lang=\"ts\">\"use strict\";\nlet userInput = '';\nlet textBlock = 'The quick brown fox jumps over the lazy sheep dog.';\nlet currentWord = 0;\nlet words = textBlock.split(' ');\nlet completedWords;\nlet incompleteWords;\n$: completedWords = words.slice(0, currentWord);\n$: incompleteWords = words.slice(currentWord);\nlet inputBorderClass = 'normal';\nfunction handleKeydown(event) {\n    if (event.keyCode == 32) {\n        event.preventDefault();\n        if (userInput === words[currentWord]) {\n            userInput = '';\n            currentWord++;\n            inputBorderClass = 'normal';\n        }\n        else {\n            inputBorderClass = 'warning';\n        }\n    }\n}\n</script>\n\n<style>\n  input {\n    width: 200px;\n  }\n\n  input.normal {\n    outline-color: aqua;\n  }\n\n  input.warning {\n    outline-color: red;\n  }\n\n  mark.red {\n    color: #ff0000;\n    background: none;\n  }\n\n  mark.green {\n    color: green;\n    background: none;\n    text-decoration: underline;\n  }\n</style>\n\n<svelte:window on:keydown={handleKeydown} />\n\n<div>\n  <p>\n    <mark class=\"green\">{completedWords.join(' ')}</mark>\n    <mark class=\"red\">{incompleteWords.join(' ')}</mark>\n  </p>\n</div>\n<div>\n  <span>\n    <input class={inputBorderClass} type=\"text\" bind:value={userInput} />\n  </span>\n</div>\n",
    "<script lang=\"ts\">\"use strict\";\nlet inputValue = 4;\nlet outputValue = 2;\n$: outputValue = Math.sqrt(inputValue);\n</script>\n\n<style>\n  input {\n    width: 80px;\n  }\n</style>\n\n<div class=\"columns is-mobile is-centered\">\n  <div class=\"column is-half\">\n    <div class=\"field\">\n      <div class=\"control\">\n        <span>\n          <input class=\"input is-primary\" type=\"number\" min={0} required bind:value={inputValue} />\n          Square Root: {outputValue}\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n",
    "<script lang=\"ts\">\"use strict\";\nconst links = ['Stats', 'Timeline'];\nconst emojis = ['🌐', '📊'];\nlet mobileView = false;\n</script>\n\n<style>\n  button {\n    border: none;\n  }\n\n  .navbar {\n    opacity: 90%;\n  }\n</style>\n\n<nav class=\"navbar is-fixed-top is-dark\" role=\"navigation\" aria-label=\"main navigation\">\n  <div class=\"navbar-brand\">\n\n    <button\n      role=\"button\"\n      class=\"navbar-burger burger\"\n      class:is-active={mobileView}\n      aria-label=\"menu\"\n      aria-expanded=\"false\"\n      data-target=\"navbarBasicExample\"\n      on:click={() => {\n        mobileView = !mobileView\n      }}>\n      <span aria-hidden=\"true\" />\n      <span aria-hidden=\"true\" />\n      <span aria-hidden=\"true\" />\n    </button>\n  </div>\n\n  <div id=\"navbarBasicExample\" class=\"navbar-menu\" class:is-active={mobileView}>\n    <div class=\"navbar-start\">\n      {#each links as link, idx}\n        <a class=\"navbar-item\" href=\"/{link}\" rel=\"noopener\">{emojis[idx]} {link}</a>\n      {/each}\n\n    </div>\n\n    <div class=\"navbar-end\">\n\n      <div class=\"navbar-item has-dropdown is-hoverable\">\n        <a class=\"navbar-link\" href=\"/\">🕹️ Time Wasters</a>\n\n        <div class=\"navbar-dropdown\">\n          <a class=\"navbar-item\" href=\"/colorfill\" rel=\"noopener\">🌈 Color Fill</a>\n          <a class=\"navbar-item\" href=\"/candychomper\" rel=\"noopener\">🍬 Candy Chomper</a>\n          <a class=\"navbar-item\" href=\"/profitcalculator\" rel=\"noopener\">📉 Profit Calculator</a>\n          <a class=\"navbar-item\" href=\"/blackjack\" rel=\"noopener\">🃏 BlackJack</a>\n        </div>\n      </div>\n\n      <!-- <div class=\"navbar-item has-dropdown is-hoverable\">\n        <a class=\"navbar-link\" href=\"/\">⚙️ Gizmos</a>\n\n        <div class=\"navbar-dropdown\">\n          <a class=\"navbar-item\" href=\"/counter\" rel=\"noopener\">➕ Counter</a>\n          <a class=\"navbar-item\" href=\"/squarerootbind\" rel=\"noopener\">🟧 Square Root</a>\n          <a class=\"navbar-item\" href=\"/speedtyper\" rel=\"noopener\">💻 Speed Typer</a>\n        </div>\n      </div> -->\n\n      <a class=\"navbar-item\" href=\"https://medium.com/@lineville\" target=\"_blank\" rel=\"noopener\">\n        <span class=\"icon is-medium\">\n          <i class=\"fab fa-medium\" />\n        </span>\n        <span>Blog</span>\n      </a>\n      <hr class=\"navbar-divider\" />\n      <a class=\"navbar-item\" href=\"https://github.com/lineville/svelte-ts\" target=\"_blank\" rel=\"noopener\">\n        <span class=\"icon is-medium\">\n          <i class=\"fab fa-github\" />\n        </span>\n        <span>GitHub</span>\n      </a>\n\n      <a class=\"navbar-item\" href=\"https://portfolio-6eyf.onrender.com/\" target=\"_blank\" rel=\"noopener\">\n        <img\n          alt=\"avatar\"\n          src=\"https://avataaars.io/?avatarStyle=Transparent&topType=ShortHairShortWaved&accessoriesType=Prescription02&hairColor=Blonde&facialHairType=BeardLight&facialHairColor=Blonde&clotheType=Hoodie&clotheColor=Heather&eyeType=Default&eyebrowType=RaisedExcitedNatural&mouthType=Smile&skinColor=Light\" />\n        &nbsp Me\n      </a>\n\n      <div class=\"navbar-item tags has-addons\">\n        <span class=\"tag\">v 0.0.1</span>\n        <span class=\"tag is-primary\">Beta</span>\n      </div>\n    </div>\n  </div>\n</nav>\n",
    "<script>\n  export let checked = false\n  export const color = '#2196F3'\n</script>\n\n<style>\n  .switch {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n  }\n\n  .switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n\n  .slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #ccc;\n    -webkit-transition: 0.4s;\n    transition: 0.4s;\n    border-radius: 34px;\n  }\n\n  .slider:before {\n    position: absolute;\n    content: '';\n    height: 26px;\n    width: 26px;\n    left: 4px;\n    bottom: 4px;\n    background-color: white;\n    -webkit-transition: 0.4s;\n    transition: 0.4s;\n    border-radius: 50%;\n  }\n\n  input:checked + .slider {\n    background-color: #2196f3;\n  }\n\n  input:checked + .slider {\n    box-shadow: 0 0 1px #2196f3;\n  }\n\n  input:checked + .slider:before {\n    -webkit-transform: translateX(26px);\n    -ms-transform: translateX(26px);\n    transform: translateX(26px);\n  }\n</style>\n\n<label class=\"switch\">\n  <input type=\"checkbox\" bind:checked />\n  <span class=\"slider\" />\n</label>\n",
    "<script lang=\"ts\">export let deaths = 0;\nexport let todayDeaths = 0;\nexport let todayCases = 0;\nexport let cases = 0;\nexport let active = 0;\nconst cleanData = (value) => {\n    return value === null || value === undefined ? 0 : value;\n};\n</script>\n\n<style>\n  .table {\n    align-items: center;\n  }\n</style>\n\n<table class=\"table is-hoverable\">\n  <tr>\n    <td>Deaths</td>\n    <td>{cleanData(deaths)}</td>\n  </tr>\n  <tr>\n    <td>Deaths Today</td>\n    <td>{cleanData(todayDeaths)}</td>\n  </tr>\n  <tr>\n    <td>Cases Today</td>\n    <td>{cleanData(todayCases)}</td>\n  </tr>\n  <tr>\n    <td>Cases</td>\n    <td>{cleanData(cases)}</td>\n  </tr>\n  <tr>\n    <td>Active</td>\n    <td>{cleanData(active)}</td>\n  </tr>\n</table>\n",
    "<script lang=\"ts\">export let deaths = 0;\nexport let todayDeaths = 0;\nexport let todayCases = 0;\nexport let cases = 0;\nexport let recovered = 0;\nexport let active = 0;\nexport let critical = 0;\nexport let casesPerOneMillion = 0;\nexport let deathsPerOneMillion = 0;\nconst cleanData = (value) => {\n    return value === null || value === undefined ? 0 : value;\n};\n</script>\n\n<style>\n  td {\n    text-align: center;\n    width: 100%;\n  }\n</style>\n\n<table class=\"table is-hoverable\">\n  <tr>\n    <td>Deaths</td>\n    <td>{cleanData(deaths)}</td>\n  </tr>\n  <tr>\n    <td>Deaths Today</td>\n    <td>{cleanData(todayDeaths)}</td>\n  </tr>\n  <tr>\n    <td>Cases Today</td>\n    <td>{cleanData(todayCases)}</td>\n  </tr>\n  <tr>\n    <td>Cases</td>\n    <td>{cleanData(cases)}</td>\n  </tr>\n  <tr>\n    <td>Recovered</td>\n    <td>{cleanData(recovered)}</td>\n  </tr>\n  <tr>\n    <td>Active</td>\n    <td>{cleanData(active)}</td>\n  </tr>\n  <tr>\n    <td>Critical</td>\n    <td>{cleanData(critical)}</td>\n  </tr>\n  <tr>\n    <td>Cases / Million</td>\n    <td>{cleanData(casesPerOneMillion)}</td>\n  </tr>\n  <tr>\n    <td>Deaths / Million</td>\n    <td>{cleanData(deathsPerOneMillion)}</td>\n  </tr>\n</table>\n",
    "<script lang=\"ts\">import VirusGlobal from './VirusGlobal.svelte';\nimport VirusDomestic from './VirusDomestic.svelte';\nimport Switch from '../Shared/Switch.svelte';\nlet global = true;\nlet showTimeline = false;\n</script>\n\n<style>\n  .switch {\n    margin: 10px 10px;\n  }\n</style>\n\n<div>\n  <h3>Covid-19 Stats by {global ? 'Country' : 'State'}</h3>\n\n  {#if showTimeline === false}\n    <div class=\"switch\">\n      <label for=\"globalSwitch\">{global ? 'Global' : 'Domestic'}</label>\n      <Switch bind:checked={global} />\n    </div>\n  {/if}\n\n  {#if global}\n    <VirusGlobal />\n  {:else}\n    <VirusDomestic />\n  {/if}\n</div>\n",
    "<script lang=\"ts\">import { onMount } from 'svelte';\nimport Chart from 'chart.js';\nconst apiURL = 'https://pomber.github.io/covid19/timeseries.json';\nconst yAxesOptions = ['deaths', 'confirmed', 'recovered'];\nlet canvas;\nlet chart;\nlet data = {};\nlet selectedMonths = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nlet threshold = 1000;\nlet dataSelection = 'deaths';\nconst createDataSet = (country) => {\n    let randColor = '#' + ((Math.random() * 0xffffff) << 0).toString(16);\n    let result = { label: country, backgroundColor: randColor, borderColor: randColor, fill: false, data: [] };\n    result.data = data[country]\n        .filter((day) => shouldInclude(day, selectedMonths))\n        .map((day) => ({ x: day.date, y: day[dataSelection] }));\n    return result;\n};\nconst shouldInclude = ({ date }, validMonths) => {\n    return validMonths.includes(parseInt(date.split('-')[1]));\n};\nconst totalDeaths = (country) => {\n    const days = data[country];\n    return days[days.length - 1].deaths;\n};\nconst generateChart = () => {\n    const ctx = canvas.getContext('2d');\n    return new Chart(ctx, {\n        type: 'line',\n        data: {\n            datasets: Object.keys(data)\n                .filter((country) => totalDeaths(country) >= threshold)\n                .map((country) => createDataSet(country)),\n        },\n        options: {\n            legend: {\n                display: false,\n            },\n            title: {\n                text: 'Chart.js Time Scale',\n            },\n            responsive: true,\n            scales: {\n                xAxes: [\n                    {\n                        type: 'time',\n                        time: {\n                            parser: 'YYYY MM DD',\n                            tooltipFormat: 'YYYY MM DD',\n                        },\n                        scaleLabel: {\n                            display: true,\n                            labelString: 'Date',\n                        },\n                    },\n                ],\n                yAxes: [\n                    {\n                        scaleLabel: {\n                            display: true,\n                            labelString: dataSelection,\n                        },\n                    },\n                ],\n            },\n        },\n    });\n};\nconst refreshGrid = () => {\n    chart.destroy();\n    chart = generateChart();\n};\nonMount(async () => {\n    try {\n        let result = await fetch(apiURL);\n        data = await result.json();\n    }\n    catch (e) {\n        console.error('error fetching timeline data', e);\n    }\n    finally {\n        chart = generateChart();\n    }\n});\n</script>\n\n<style>\n  label {\n    /* Hack to center the form */\n    padding-left: 25vw;\n  }\n</style>\n\n<div>\n  <h1>Timeline</h1>\n\n  <div class=\"field is-grouped is-grouped-centered\">\n    <div class=\"field-label\"><label for=\"threshold\" class=\"label\">Threshold</label></div>\n    <div class=\"field-body\">\n      <div class=\"field is-narrow\">\n        <p class=\"control\"><input class=\"input is-info\" type=\"number\" bind:value={threshold} /></p>\n      </div>\n      <div class=\"field has-addons\">\n        <div class=\"control\">\n          <div class=\"select\">\n            <select bind:value={dataSelection}>\n              {#each yAxesOptions as dataSelection}\n                <option>{dataSelection}</option>\n              {/each}\n            </select>\n          </div>\n        </div>\n        <div class=\"control\">\n          <button type=\"submit\" class=\"button is-primary\" on:click={refreshGrid}>Refresh Chart</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <h2>Only displaying countries with at least {threshold} total {dataSelection}</h2>\n\n  <!-- CHART -->\n  <div class=\"chart-container\" style=\"position: relative; height:90vh; width:95vw\">\n    <canvas id=\"timelineChart\" bind:this={canvas} />\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AASE,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,AAClB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC;ACiFD,mBAAI,CACJ,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC,AAED,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,UAAU,eAAC,CAAC,AACV,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AACzB,CAAC;ACbD,oBAAM,CACN,KAAK,cAAC,CAAC,AACL,IAAI,CAAE,CAAC,CAAC,CAAC,CACT,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,IAAI,AACf,CAAC,AAED,kBAAI,CACJ,oBAAM,CACN,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC,AACD,YAAY,cAAC,CAAC,AACZ,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACb,CAAC,AAED,WAAW,cAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,UAAU,cAAC,CAAC,AACV,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AACzB,CAAC;ACvHD,EAAE,eAAC,CAAC,AACF,eAAe,CAAE,IAAI,CACrB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,SAAS,eAAC,CAAC,AACT,mBAAmB,CAAE,MAAM,CAC3B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,IAAI,AACvB,CAAC;AC/BD,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC;ACwZD,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,AACzB,CAAC,AAED,EAAE,eAAC,CAAC,AACF,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,GAAG,AACZ,CAAC,eAED,SAAS,AAAC,CAAC,AACT,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,SAAS,eAAC,CAAC,AACT,aAAa,CAAE,MAAM,CAAC,UAAU,AAClC,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,GAAG,AACjB,CAAC,AAED,eAAe,eAAC,CAAC,AACf,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,GAAG,AACjB,CAAC,AAED,aAAa,eAAC,CAAC,AACb,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,GAAG,AACjB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,UAAU,CAAE,GAAG,AACjB,CAAC,AAED,WAAW,eAAC,CAAC,AACX,WAAW,CAAE,IAAI,AACnB,CAAC;AC7cD,EAAE,eAAC,CAAC,AACF,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,AAC1B,CAAC;ACPD,MAAM,eAAC,CAAC,AACN,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,AACpB,CAAC;ACyED,KAAK,eAAC,CAAC,AACL,YAAY,CAAE,IAAI,AACpB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,KAAK,CAAE,IAAI,AACb,CAAC;AC5DD,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,KAAK,AACd,CAAC,AAED,KAAK,OAAO,cAAC,CAAC,AACZ,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,KAAK,QAAQ,cAAC,CAAC,AACb,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,IAAI,IAAI,cAAC,CAAC,AACR,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,IAAI,MAAM,cAAC,CAAC,AACV,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,IAAI,CAChB,eAAe,CAAE,SAAS,AAC5B,CAAC;ACxCD,KAAK,eAAC,CAAC,AACL,KAAK,CAAE,IAAI,AACb,CAAC;ACFD,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,IAAI,AACd,CAAC,AAED,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,GAAG,AACd,CAAC;ACPD,OAAO,4BAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAED,qBAAO,CAAC,KAAK,cAAC,CAAC,AACb,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,AACX,CAAC,AAED,OAAO,4BAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,OAAO,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,gBAAgB,CAAE,IAAI,CACtB,kBAAkB,CAAE,IAAI,CACxB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,mCAAO,OAAO,AAAC,CAAC,AACd,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,CACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,GAAG,CACX,gBAAgB,CAAE,KAAK,CACvB,kBAAkB,CAAE,IAAI,CACxB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,mBAAK,QAAQ,CAAG,OAAO,cAAC,CAAC,AACvB,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,mBAAK,QAAQ,CAAG,OAAO,cAAC,CAAC,AACvB,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,AAC7B,CAAC,AAED,mBAAK,QAAQ,CAAG,qBAAO,OAAO,AAAC,CAAC,AAC9B,iBAAiB,CAAE,WAAW,IAAI,CAAC,CACnC,aAAa,CAAE,WAAW,IAAI,CAAC,CAC/B,SAAS,CAAE,WAAW,IAAI,CAAC,AAC7B,CAAC;AC9CD,MAAM,cAAC,CAAC,AACN,WAAW,CAAE,MAAM,AACrB,CAAC;ACED,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,IAAI,AACb,CAAC;ACVD,OAAO,eAAC,CAAC,AACP,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC;AC6ED,KAAK,cAAC,CAAC,AAEL,YAAY,CAAE,IAAI,AACpB,CAAC"
}